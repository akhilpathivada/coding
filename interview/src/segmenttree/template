abstract class SegmentTree {

        public final int[] nodes; // This array stores Segment Tree nodes

        private final int size; // Size of Segment Tree

        public SegmentTree(int n) {
                // compute height of segment tree
                int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));
                size = 2 * (int) Math.pow(2, x) - 1;
                nodes = new int[size];
        }

        public abstract int constructSegmentTree(int[] nums, int ss, int se, int index);

}

class SegmentTreeForRangeMinimumQuery extends SegmentTree {

    public SegmentTreeForRangeMinimumQuery(int n) {
        super(n);
    }

    @Override
    public int constructSegmentTree(int[] arr, int ss, int se, int index) {
        // If there is one element in array, store it in current
        //  node of segment tree and return
        if (ss == se) {
            nodes[index] = arr[ss];
            return arr[ss];
        }
        int mid = ss + (se - ss) / 2;
        // If there are more than one element, then recur for left and
        // right subtrees and store the minimum of two values in this node
        nodes[index] = Math.min(constructSegmentTree(arr, ss, mid, index * 2 + 1),
                constructSegmentTree(arr, mid + 1, se, index * 2 + 2));
        return nodes[index];
    }
}

class SegmentTreeForRangeSumQuery extends SegmentTree {

    public SegmentTreeForRangeSumQuery(int n) {
        super(n);
    }

    @Override
    public int constructSegmentTree(int[] arr, int ss, int se, int index) {
        // If there is one element in array, store it in current
        //  node of segment tree and return
        if (ss == se) {
            nodes[index] = arr[ss];
            return arr[ss];
        }
        int mid = ss + (se - ss) / 2;
        // If there are more than one element, then recur for left and
        // right subtrees and store the minimum of two values in this node
        nodes[index] = constructSegmentTree(arr, ss, mid, index * 2 + 1) +
                constructSegmentTree(arr, mid + 1, se, index * 2 + 2);
        return nodes[index];
    }
}