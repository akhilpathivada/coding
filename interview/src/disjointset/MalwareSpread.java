package disjointset;

import java.util.Arrays;

/**
 * Date 10/04/24
 *
 * @author akhilpathivada
 *
 * https://leetcode.com/problems/minimize-malware-spread/description/
 *
 */
public class MalwareSpread {

    private static final class DisjointSet {

        private final int[] parent;

        private final int[] size;

        private DisjointSet(int n) {
            parent = new int[n + 1];
            size = new int[n + 1];
            for (int i = 0; i <= n; ++i) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        private int findUltimateParent(int node) {
            if (parent[node] == node) {
                return node;
            }
            return parent[node] = findUltimateParent(parent[node]);
        }

        private void unionBySize(int u, int v) {
            int ultimateParentOfU = findUltimateParent(u);
            int ultimateParentOfV = findUltimateParent(v);
            // if both are already in same set
            if (ultimateParentOfU == ultimateParentOfV) {
                return;
            }
            if (size[ultimateParentOfU] < size[ultimateParentOfV]) {
                parent[ultimateParentOfU] = ultimateParentOfV;
                size[ultimateParentOfV] += size[ultimateParentOfU];
            } else {
                parent[ultimateParentOfV] = ultimateParentOfU;
                size[ultimateParentOfU] += size[ultimateParentOfV];
            }
        }
    }

    private int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DisjointSet disjointSet = new DisjointSet(n);
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j] == 1) {
                    disjointSet.unionBySize(i, j);
                }
            }
        }
        // store the malware effect for each component
        int[] malwareEffect = new int[n];
        for (int i : initial) {
            malwareEffect[disjointSet.findUltimateParent(i)]++;
        }
        Arrays.sort(initial);
        int maxSizeOfMalwareSpread = 0;
        int malwareNodeInMaxSize = initial[0];
        // find the component which has exactly 1 malware node
        for (int i : initial) {
            // get parent of malware node
            int root = disjointSet.findUltimateParent(i);
            // get number of malware nodes in this component
            int malwareCount = malwareEffect[root];
            if (malwareCount == 1) {
                int size = disjointSet.size[root];
                if (size > maxSizeOfMalwareSpread) {
                    maxSizeOfMalwareSpread = size;
                    malwareNodeInMaxSize = i;
                }
            }
        }
        return malwareNodeInMaxSize;
    }

    public static void main(String[] args) {
        int[][] graph = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        int[] initial = {1, 2};
        System.out.println(new MalwareSpread().minMalwareSpread(graph, initial));
    }
}
