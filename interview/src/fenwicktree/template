class FenwickTree {

    public final int[] binaryIndexedTree;

    public FenwickTree(int n) {
        // binaryIndexedTree should be of size: n + 1
        binaryIndexedTree = new int[n + 1];
        // initialize binaryIndexedTree[] as 0
        Arrays.fill(binaryIndexedTree, 0);
    }

    /**
     * start from (index + 1) if you're updating index in original array. Keep adding this value
     * for next node till you reach outside range of tree
     */
    public void updateBinaryIndexedTree(int index, int value) { // O(log(n))
        while (index < binaryIndexedTree.length) {
            binaryIndexedTree[index] += value;
            index = getNext(index);
        }
    }

    /**
     * start from index + 1 if you want prefix sum 0 to index. Keep adding value
     * till you reach 0
     */
    public int getSum(int index) { // O(log(n))
        index = index + 1;
        int sum = 0;
        while (index > 0) {
            sum += binaryIndexedTree[index];
            index = getParent(index);
        }
        return sum;
    }

    /**
     * to get parent:
     * 1) 2's complement of index
     * 2) AND this with original index
     * 3) subtract it from original index
     *
     * Example:
     * input: 1010 -> 10
     * output: 1000 -> 8
     * means, parent(10) is node 8
     */
    private int getParent(int index) { // O(1)
        return index - (index & -index);
    }

    /**
     * to get next:
     * 1) 2's complement of index
     * 2) AND this with original index
     * 3) add it to original index
     *
     * Example:
     * input: 1000
     * output: 1010
     * means, next(8) is node 10
     */
    private int getNext(int index){ // O(1)
        return index + (index & -index);
    }

    /**
     * constructing tree is like updating Fenwick tree for every value in array
     */
    public void constructTree(int[] nums) { // O(n) * O(log(n))
        int n = nums.length;
        for (int i = 1; i <= n; ++i) {
            // store the actual values in binaryIndexedTree[] using updateBinaryIndexedTree()
            updateBinaryIndexedTree(i, nums[i - 1]);
        }
    }

}